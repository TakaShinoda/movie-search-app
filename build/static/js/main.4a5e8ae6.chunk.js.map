{"version":3,"sources":["components/Header.jsx","components/Movie.jsx","components/Search.jsx","reducers/index.js","action/index.js","components/App.jsx","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","width","alt","src","Year","Search","useState","searchValue","setSearchValue","type","value","onChange","e","target","onClick","preventDefault","search","reducer","state","action","loading","errorMessage","movies","payload","error","App","useReducer","dispatch","useEffect","fetch","process","then","response","json","jsonResponse","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gQAEaA,G,MAAS,SAACC,GACnB,OACI,4BAAQC,UAAU,cACd,4BAAKD,EAAME,SCDVC,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACdC,EAA0B,QAAjBD,EAAME,OAHS,qGAGsCF,EAAME,OAE1E,OACI,yBAAKL,UAAU,SACX,4BAAKG,EAAMG,OACX,6BACI,yBAAKC,MAAM,MAAMC,IAAG,4BAAuBL,EAAMG,OAASG,IAAKL,KAEnE,+BAAMD,EAAMO,KAAZ,OCXCC,EAAS,SAACZ,GAAW,IAAD,EACSa,mBAAS,IADlB,mBACtBC,EADsB,KACTC,EADS,KAiB7B,OACI,0BAAMd,UAAU,UACZ,2BAAOe,KAAK,OAAOC,MAAOH,EAAaI,SAhBd,SAAAC,GAC7BJ,EAAeI,EAAEC,OAAOH,UAgBpB,2BAAOD,KAAK,SAASC,MAAM,SAASI,QATjB,SAAAF,GACvBA,EAAEG,iBACFtB,EAAMuB,OAAOT,GALbC,EAAe,S,OCRVS,EAAU,SAACC,EAAOC,GAC3B,OAAOA,EAAOV,MACZ,ICJ+B,wBDK7B,OAAO,eACFS,EADL,CAEEE,SAAS,EACTC,aAAc,OAElB,ICT+B,wBDU7B,OAAO,eACFH,EADL,CAEEE,SAAS,EACTE,OAAQH,EAAOI,UAEnB,ICd+B,wBDe7B,OAAO,eACFL,EADL,CAEEE,SAAS,EACTC,aAAcF,EAAOK,QAEzB,QACE,OAAON,IEfFO,EAAM,WACjB,IADuB,EAOGC,qBAAWT,EANhB,CACnBG,SAAS,EACTE,OAAQ,GACRD,aAAc,OAJO,mBAOhBH,EAPgB,KAOTS,EAPS,KASrBC,qBAAU,WACVC,MAAMC,kDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJP,EAAS,CACPlB,KDrB2B,wBCsB3Bc,QAASW,EAAa7B,cAG3B,IAED,IAqBQiB,EAAkCJ,EAAlCI,OAAQD,EAA0BH,EAA1BG,aAAcD,EAAYF,EAAZE,QAE9B,OACC,yBAAK1B,UAAU,OACd,kBAAC,EAAD,CAAQC,KAAK,UACb,kBAAC,EAAD,CAAQqB,OA1BK,SAAAT,GACboB,EAAS,CACPlB,KD9B6B,0BCiCjCoB,MAAM,qCAA8BtB,EAA9B,YAAqDuB,YACxDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaC,SACfR,EAAS,CACPlB,KDrCyB,wBCsCzBc,QAASW,EAAa7B,SAGxBsB,EAAS,CACPlB,KDzCyB,wBC0CzBY,aAAca,EAAaE,cAWjC,uBAAG1C,UAAU,aAAb,yCACA,yBAAKA,UAAU,UACZ0B,IAAYC,EACZ,4CACIA,EACH,yBAAK3B,UAAU,gBAAgB2B,GAE/BC,EAAOe,KAAI,SAACxC,EAAOyC,GAAR,OACT,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAczC,EAAMG,OAASH,MAAOA,UCnDtC2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,c","file":"static/js/main.4a5e8ae6.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = (props) => {\n    return (\n        <header className=\"App-header\">\n            <h2>{props.text}</h2>\n        </header>\n    )\n}","import React from 'react'\n\nconst DEFAULT_PLACEHOLDER_IMAGE = \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\"\n\nexport const Movie = ({ movie }) => {\n    const poster = movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster\n\n    return (\n        <div className=\"movie\">\n            <h2>{movie.Title}</h2>\n            <div>\n                <img width=\"200\" alt={`The movie titled: ${movie.Title}`} src={poster} />\n            </div>\n            <p>({ movie.Year })</p>\n        </div>\n    )\n}","import React, { useState } from 'react'\n\nexport const Search = (props) => {\n    const [searchValue, setSearchValue] = useState('')\n\n    const handleSearchInputChanges = e => {\n        setSearchValue(e.target.value)\n    }\n\n    const resetInputField = () => {\n        setSearchValue('')\n    }\n\n    const callSearchFunction = e => {\n        e.preventDefault()\n        props.search(searchValue)\n        resetInputField()\n    }\n\n    return (\n        <form className=\"search\">\n            <input type=\"text\" value={searchValue} onChange={handleSearchInputChanges} />\n            <input type=\"submit\" value=\"SEARCH\" onClick={callSearchFunction} />\n        </form>\n    )\n}","import { SEARCH_MOVIES_REQUEST, SEARCH_MOVIES_SUCCESS, SEARCH_MOVIES_FAILURE } from '../action'\n\nexport const reducer = (state, action) => {\n    switch(action.type) {\n      case SEARCH_MOVIES_REQUEST:\n        return {\n          ...state,\n          loading: true,\n          errorMessage: null\n        }\n      case SEARCH_MOVIES_SUCCESS:\n        return {\n          ...state,\n          loading: false,\n          movies: action.payload\n        }\n      case SEARCH_MOVIES_FAILURE:\n        return {\n          ...state,\n          loading: false,\n          errorMessage: action.error\n        }\n      default:\n        return state\n    }\n  }","export const SEARCH_MOVIES_REQUEST = 'SEARCH_MOVIES_REQUEST'\nexport const SEARCH_MOVIES_SUCCESS = 'SEARCH_MOVIES_SUCCESS'\nexport const SEARCH_MOVIES_FAILURE = 'SEARCH_MOVIES_FAILURE'","import React, { useReducer, useEffect } from \"react\"\nimport \"../App.css\"\nimport { Header } from \"./Header\"\nimport { Movie } from \"./Movie\"\nimport { Search } from \"./Search\"\nimport { reducer } from '../reducers'\nimport { SEARCH_MOVIES_REQUEST, SEARCH_MOVIES_SUCCESS, SEARCH_MOVIES_FAILURE } from '../action'\n\nexport const App = () => {\n  const initialState = {\n    loading: true,\n    movies: [],\n    errorMessage: null\n  }\n\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n    useEffect(() => {\n    fetch(process.env.REACT_APP_MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        dispatch({\n          type: SEARCH_MOVIES_SUCCESS,\n          payload: jsonResponse.Search\n        })\n      })\n  }, [])\n\n    const search = searchValue => {\n      dispatch({\n        type: SEARCH_MOVIES_REQUEST\n      })\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=`+ process.env.REACT_APP_MOVIE_API_KEY)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n            type: SEARCH_MOVIES_SUCCESS,\n            payload: jsonResponse.Search\n          })\n        } else {\n          dispatch({\n            type: SEARCH_MOVIES_FAILURE,\n            errorMessage: jsonResponse.Error\n          })\n        }\n      })\n    }\n    const { movies, errorMessage, loading } = state\n    \n    return (\n     <div className=\"App\">\n      <Header text=\"MOVIE\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n         <span>loading...</span>\n         ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}